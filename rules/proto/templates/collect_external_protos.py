import os
import re

s_visibility = __visibility__
s_info_target = "__info_target__"
s_dir_rel_location = "__directory_location__"
s_bin_dir = "__bin_dir__"
s_dir_location = "%s/%s" % (os.getenv("BUILD_WORKSPACE_DIRECTORY"), s_dir_rel_location)
s_imports = __imports__
s_ignore_non_proto3 = __ignore_non_proto3__
s_pass_tags = __pass_tags__

def q(value):
    return "\"" + value + "\""

def arr(values, outident = 2):
    if not values:
        return "[]"
    if len(values) == 1:
        return "[ %s ]" % values[0]

    pref = "\t" * outident
    result = "[\n"
    for value in values:
        result += pref + value + ",\n"
    result += "\t" * (outident - 1) + "]"
    return result

def rule_args(**kwargs):
    result = "(\n"
    for key, value in kwargs.items():
        result += "\t" + key + " = " + str(value) + ",\n"
    result += ")"
    return result

def to_label(file_path):
    return "//%s/%s:%s" % (
        s_dir_rel_location,
        os.path.dirname(file_path),
        os.path.basename(file_path).replace(".", "_"),
    )

def to_yazik_library_name(file_path):
    return os.path.splitext(file_path)[0]

def check_is_proto3(file):
    with open(file) as fin:
        for line in fin:
            if re.match(r"(\s*)syntax(\s*)=(\s*)\"proto3\"(\s*);", line):
                return True
            if not re.match(r"((\s*)//|(\s*)\n)", line):
                return False

    return False

def check_has_rpc(file):
    with open(file) as fin:
        for line in fin:
            if not re.match(r"(\s*)service", line):
                continue
            return True
    return False

ignore_protos = []
if s_ignore_non_proto3:
    for file in s_imports.keys():
        if not check_is_proto3("%s/%s" % (s_dir_rel_location, file)):
            ignore_protos.append(file)

build_files = {}
for file, imports in s_imports.items():
    dir = "%s/%s" % (s_dir_location, os.path.dirname(file))
    if not os.path.exists(dir):
        os.makedirs(dir)

    if not dir in build_files:
        build_content = [
            "# AUTOGENERATED BUILD FILE, DO NOT EDIT!!!\n",
            "\n",
            "load(%s, %s)\n" % (
                q("@build_flare_yazik//rules/compiler:yazik.bzl"),
                q("yazik"),
            ),
            "\n",
            ]
        build_files[dir] = build_content
    else:
        build_content = build_files[dir]


    proto_file_name = os.path.basename(file)
    proto_label = proto_file_name.replace(".", "_")
    src_label = proto_label + "_src"

    build_content += [
        "yazik.select_external%s\n" % rule_args(
            name = q(src_label),
            info = q("//%s:%s" % (
                s_dir_rel_location,
                s_info_target
            )),
            file_path = q(file),
        ),
        "\n",
        "yazik.library%s\n" % rule_args(
            name = q(to_yazik_library_name(proto_file_name)),
            srcs = arr([
                q(":" + src_label),
            ]),
            deps = arr([
                q(to_label(to_yazik_library_name(imp)))
                for imp in imports
            ]),
            has_rpc = check_has_rpc("%s/%s" % (s_dir_rel_location, file)),
            ignore = [
                to_label(to_yazik_library_name(imp))
                for imp in imports
                if imp in ignore_protos
            ],
            pb_only = file in ignore_protos,
            strip_import_prefix = q("//%s" % s_dir_rel_location),
            tags = arr([ q(tag) for tag in s_pass_tags]),
            visibility = s_visibility,
        ),
        "\n",
    ]

for dir, content in build_files.items():
    with open(dir + "/BUILD.bazel","w") as build_file:
        build_file.writelines(content)