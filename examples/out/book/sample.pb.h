// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: book/sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_book_2fsample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_book_2fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_book_2fsample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_book_2fsample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_book_2fsample_2eproto;
namespace com {
namespace book {
class Author;
class AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class Book;
class BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class BookStore;
class BookStoreDefaultTypeInternal;
extern BookStoreDefaultTypeInternal _BookStore_default_instance_;
class BookStore_BooksEntry_DoNotUse;
class BookStore_BooksEntry_DoNotUseDefaultTypeInternal;
extern BookStore_BooksEntry_DoNotUseDefaultTypeInternal _BookStore_BooksEntry_DoNotUse_default_instance_;
class Book_Page;
class Book_PageDefaultTypeInternal;
extern Book_PageDefaultTypeInternal _Book_Page_default_instance_;
class CycleDep1;
class CycleDep1DefaultTypeInternal;
extern CycleDep1DefaultTypeInternal _CycleDep1_default_instance_;
class CycleDep2;
class CycleDep2DefaultTypeInternal;
extern CycleDep2DefaultTypeInternal _CycleDep2_default_instance_;
class GetBookRequest;
class GetBookRequestDefaultTypeInternal;
extern GetBookRequestDefaultTypeInternal _GetBookRequest_default_instance_;
class GetBookViaAuthor;
class GetBookViaAuthorDefaultTypeInternal;
extern GetBookViaAuthorDefaultTypeInternal _GetBookViaAuthor_default_instance_;
class InsideOneOfMessage;
class InsideOneOfMessageDefaultTypeInternal;
extern InsideOneOfMessageDefaultTypeInternal _InsideOneOfMessage_default_instance_;
}  // namespace book
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::book::Author* Arena::CreateMaybeMessage<::com::book::Author>(Arena*);
template<> ::com::book::Book* Arena::CreateMaybeMessage<::com::book::Book>(Arena*);
template<> ::com::book::BookStore* Arena::CreateMaybeMessage<::com::book::BookStore>(Arena*);
template<> ::com::book::BookStore_BooksEntry_DoNotUse* Arena::CreateMaybeMessage<::com::book::BookStore_BooksEntry_DoNotUse>(Arena*);
template<> ::com::book::Book_Page* Arena::CreateMaybeMessage<::com::book::Book_Page>(Arena*);
template<> ::com::book::CycleDep1* Arena::CreateMaybeMessage<::com::book::CycleDep1>(Arena*);
template<> ::com::book::CycleDep2* Arena::CreateMaybeMessage<::com::book::CycleDep2>(Arena*);
template<> ::com::book::GetBookRequest* Arena::CreateMaybeMessage<::com::book::GetBookRequest>(Arena*);
template<> ::com::book::GetBookViaAuthor* Arena::CreateMaybeMessage<::com::book::GetBookViaAuthor>(Arena*);
template<> ::com::book::InsideOneOfMessage* Arena::CreateMaybeMessage<::com::book::InsideOneOfMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace book {

enum Book_Availability : int {
  Book_Availability_Available = 0,
  Book_Availability_NotAvailable = 1,
  Book_Availability_Book_Availability_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Book_Availability_Book_Availability_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Book_Availability_IsValid(int value);
constexpr Book_Availability Book_Availability_Availability_MIN = Book_Availability_Available;
constexpr Book_Availability Book_Availability_Availability_MAX = Book_Availability_NotAvailable;
constexpr int Book_Availability_Availability_ARRAYSIZE = Book_Availability_Availability_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Book_Availability_descriptor();
template<typename T>
inline const std::string& Book_Availability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Book_Availability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Book_Availability_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Book_Availability_descriptor(), enum_t_value);
}
inline bool Book_Availability_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Book_Availability* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Book_Availability>(
    Book_Availability_descriptor(), name, value);
}
enum CanRecommend : int {
  Yep = 0,
  Nope = 3,
  CanRecommend_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CanRecommend_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CanRecommend_IsValid(int value);
constexpr CanRecommend CanRecommend_MIN = Yep;
constexpr CanRecommend CanRecommend_MAX = Nope;
constexpr int CanRecommend_ARRAYSIZE = CanRecommend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CanRecommend_descriptor();
template<typename T>
inline const std::string& CanRecommend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CanRecommend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CanRecommend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CanRecommend_descriptor(), enum_t_value);
}
inline bool CanRecommend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CanRecommend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CanRecommend>(
    CanRecommend_descriptor(), name, value);
}
// ===================================================================

class Author PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  virtual ~Author();

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Author& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Author* New() const final {
    return CreateMaybeMessage<Author>(nullptr);
  }

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Author& from);
  void MergeFrom(const Author& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.book.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class InsideOneOfMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.InsideOneOfMessage) */ {
 public:
  inline InsideOneOfMessage() : InsideOneOfMessage(nullptr) {}
  virtual ~InsideOneOfMessage();

  InsideOneOfMessage(const InsideOneOfMessage& from);
  InsideOneOfMessage(InsideOneOfMessage&& from) noexcept
    : InsideOneOfMessage() {
    *this = ::std::move(from);
  }

  inline InsideOneOfMessage& operator=(const InsideOneOfMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsideOneOfMessage& operator=(InsideOneOfMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsideOneOfMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsideOneOfMessage* internal_default_instance() {
    return reinterpret_cast<const InsideOneOfMessage*>(
               &_InsideOneOfMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InsideOneOfMessage& a, InsideOneOfMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InsideOneOfMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsideOneOfMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsideOneOfMessage* New() const final {
    return CreateMaybeMessage<InsideOneOfMessage>(nullptr);
  }

  InsideOneOfMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsideOneOfMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsideOneOfMessage& from);
  void MergeFrom(const InsideOneOfMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsideOneOfMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.InsideOneOfMessage";
  }
  protected:
  explicit InsideOneOfMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // string field = 1;
  void clear_field();
  const std::string& field() const;
  void set_field(const std::string& value);
  void set_field(std::string&& value);
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // @@protoc_insertion_point(class_scope:com.book.InsideOneOfMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class Book_Page PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.Book.Page) */ {
 public:
  inline Book_Page() : Book_Page(nullptr) {}
  virtual ~Book_Page();

  Book_Page(const Book_Page& from);
  Book_Page(Book_Page&& from) noexcept
    : Book_Page() {
    *this = ::std::move(from);
  }

  inline Book_Page& operator=(const Book_Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book_Page& operator=(Book_Page&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Book_Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Book_Page* internal_default_instance() {
    return reinterpret_cast<const Book_Page*>(
               &_Book_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Book_Page& a, Book_Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Book_Page* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book_Page* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Book_Page* New() const final {
    return CreateMaybeMessage<Book_Page>(nullptr);
  }

  Book_Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Book_Page>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Book_Page& from);
  void MergeFrom(const Book_Page& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book_Page* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.Book.Page";
  }
  protected:
  explicit Book_Page(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinesFieldNumber = 1,
  };
  // repeated string lines = 1;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  const std::string& lines(int index) const;
  std::string* mutable_lines(int index);
  void set_lines(int index, const std::string& value);
  void set_lines(int index, std::string&& value);
  void set_lines(int index, const char* value);
  void set_lines(int index, const char* value, size_t size);
  std::string* add_lines();
  void add_lines(const std::string& value);
  void add_lines(std::string&& value);
  void add_lines(const char* value);
  void add_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lines();
  private:
  const std::string& _internal_lines(int index) const;
  std::string* _internal_add_lines();
  public:

  // @@protoc_insertion_point(class_scope:com.book.Book.Page)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class Book PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.Book) */ {
 public:
  inline Book() : Book(nullptr) {}
  virtual ~Book();

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Book& default_instance();

  enum FirstOneofCase {
    kFirstOneofString = 5,
    kFirstOneofInt = 6,
    FIRST_ONEOF_NOT_SET = 0,
  };

  enum SecondOneofCase {
    kSecondOneofString = 9,
    kSecondOneofInt = 10,
    kSecondOneofMessage = 11,
    SECOND_ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Book* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Book* New() const final {
    return CreateMaybeMessage<Book>(nullptr);
  }

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.Book";
  }
  protected:
  explicit Book(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Book_Page Page;

  typedef Book_Availability Availability;
  static constexpr Availability Available =
    Book_Availability_Available;
  static constexpr Availability NotAvailable =
    Book_Availability_NotAvailable;
  static inline bool Availability_IsValid(int value) {
    return Book_Availability_IsValid(value);
  }
  static constexpr Availability Availability_MIN =
    Book_Availability_Availability_MIN;
  static constexpr Availability Availability_MAX =
    Book_Availability_Availability_MAX;
  static constexpr int Availability_ARRAYSIZE =
    Book_Availability_Availability_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Availability_descriptor() {
    return Book_Availability_descriptor();
  }
  template<typename T>
  static inline const std::string& Availability_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Availability>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Availability_Name.");
    return Book_Availability_Name(enum_t_value);
  }
  static inline bool Availability_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Availability* value) {
    return Book_Availability_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 4,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kIsbnFieldNumber = 1,
    kAvailabilityFieldNumber = 7,
    kRecommendedFieldNumber = 8,
    kFirstOneofStringFieldNumber = 5,
    kFirstOneofIntFieldNumber = 6,
    kSecondOneofStringFieldNumber = 9,
    kSecondOneofIntFieldNumber = 10,
    kSecondOneofMessageFieldNumber = 11,
  };
  // repeated .com.book.Book.Page pages = 4;
  int pages_size() const;
  private:
  int _internal_pages_size() const;
  public:
  void clear_pages();
  ::com::book::Book_Page* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::book::Book_Page >*
      mutable_pages();
  private:
  const ::com::book::Book_Page& _internal_pages(int index) const;
  ::com::book::Book_Page* _internal_add_pages();
  public:
  const ::com::book::Book_Page& pages(int index) const;
  ::com::book::Book_Page* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::book::Book_Page >&
      pages() const;

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .com.book.Author Author = 3;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::com::book::Author& author() const;
  ::com::book::Author* release_author();
  ::com::book::Author* mutable_author();
  void set_allocated_author(::com::book::Author* author);
  private:
  const ::com::book::Author& _internal_author() const;
  ::com::book::Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::com::book::Author* author);
  ::com::book::Author* unsafe_arena_release_author();

  // int64 isbn = 1;
  void clear_isbn();
  ::PROTOBUF_NAMESPACE_ID::int64 isbn() const;
  void set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_isbn() const;
  void _internal_set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .com.book.Book.Availability availability = 7;
  void clear_availability();
  ::com::book::Book_Availability availability() const;
  void set_availability(::com::book::Book_Availability value);
  private:
  ::com::book::Book_Availability _internal_availability() const;
  void _internal_set_availability(::com::book::Book_Availability value);
  public:

  // .com.book.CanRecommend recommended = 8;
  void clear_recommended();
  ::com::book::CanRecommend recommended() const;
  void set_recommended(::com::book::CanRecommend value);
  private:
  ::com::book::CanRecommend _internal_recommended() const;
  void _internal_set_recommended(::com::book::CanRecommend value);
  public:

  // string first_oneof_string = 5;
  private:
  bool _internal_has_first_oneof_string() const;
  public:
  void clear_first_oneof_string();
  const std::string& first_oneof_string() const;
  void set_first_oneof_string(const std::string& value);
  void set_first_oneof_string(std::string&& value);
  void set_first_oneof_string(const char* value);
  void set_first_oneof_string(const char* value, size_t size);
  std::string* mutable_first_oneof_string();
  std::string* release_first_oneof_string();
  void set_allocated_first_oneof_string(std::string* first_oneof_string);
  private:
  const std::string& _internal_first_oneof_string() const;
  void _internal_set_first_oneof_string(const std::string& value);
  std::string* _internal_mutable_first_oneof_string();
  public:

  // int64 first_oneof_int = 6;
  private:
  bool _internal_has_first_oneof_int() const;
  public:
  void clear_first_oneof_int();
  ::PROTOBUF_NAMESPACE_ID::int64 first_oneof_int() const;
  void set_first_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_first_oneof_int() const;
  void _internal_set_first_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string second_oneof_string = 9;
  private:
  bool _internal_has_second_oneof_string() const;
  public:
  void clear_second_oneof_string();
  const std::string& second_oneof_string() const;
  void set_second_oneof_string(const std::string& value);
  void set_second_oneof_string(std::string&& value);
  void set_second_oneof_string(const char* value);
  void set_second_oneof_string(const char* value, size_t size);
  std::string* mutable_second_oneof_string();
  std::string* release_second_oneof_string();
  void set_allocated_second_oneof_string(std::string* second_oneof_string);
  private:
  const std::string& _internal_second_oneof_string() const;
  void _internal_set_second_oneof_string(const std::string& value);
  std::string* _internal_mutable_second_oneof_string();
  public:

  // int64 second_oneof_int = 10;
  private:
  bool _internal_has_second_oneof_int() const;
  public:
  void clear_second_oneof_int();
  ::PROTOBUF_NAMESPACE_ID::int64 second_oneof_int() const;
  void set_second_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_second_oneof_int() const;
  void _internal_set_second_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .com.book.InsideOneOfMessage second_oneof_message = 11;
  bool has_second_oneof_message() const;
  private:
  bool _internal_has_second_oneof_message() const;
  public:
  void clear_second_oneof_message();
  const ::com::book::InsideOneOfMessage& second_oneof_message() const;
  ::com::book::InsideOneOfMessage* release_second_oneof_message();
  ::com::book::InsideOneOfMessage* mutable_second_oneof_message();
  void set_allocated_second_oneof_message(::com::book::InsideOneOfMessage* second_oneof_message);
  private:
  const ::com::book::InsideOneOfMessage& _internal_second_oneof_message() const;
  ::com::book::InsideOneOfMessage* _internal_mutable_second_oneof_message();
  public:
  void unsafe_arena_set_allocated_second_oneof_message(
      ::com::book::InsideOneOfMessage* second_oneof_message);
  ::com::book::InsideOneOfMessage* unsafe_arena_release_second_oneof_message();

  void clear_first_oneof();
  FirstOneofCase first_oneof_case() const;
  void clear_second_oneof();
  SecondOneofCase second_oneof_case() const;
  // @@protoc_insertion_point(class_scope:com.book.Book)
 private:
  class _Internal;
  void set_has_first_oneof_string();
  void set_has_first_oneof_int();
  void set_has_second_oneof_string();
  void set_has_second_oneof_int();
  void set_has_second_oneof_message();

  inline bool has_first_oneof() const;
  inline void clear_has_first_oneof();

  inline bool has_second_oneof() const;
  inline void clear_has_second_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::book::Book_Page > pages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::com::book::Author* author_;
  ::PROTOBUF_NAMESPACE_ID::int64 isbn_;
  int availability_;
  int recommended_;
  union FirstOneofUnion {
    FirstOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::int64 first_oneof_int_;
  } first_oneof_;
  union SecondOneofUnion {
    SecondOneofUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_oneof_string_;
    ::PROTOBUF_NAMESPACE_ID::int64 second_oneof_int_;
    ::com::book::InsideOneOfMessage* second_oneof_message_;
  } second_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class GetBookRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.GetBookRequest) */ {
 public:
  inline GetBookRequest() : GetBookRequest(nullptr) {}
  virtual ~GetBookRequest();

  GetBookRequest(const GetBookRequest& from);
  GetBookRequest(GetBookRequest&& from) noexcept
    : GetBookRequest() {
    *this = ::std::move(from);
  }

  inline GetBookRequest& operator=(const GetBookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookRequest& operator=(GetBookRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBookRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBookRequest* internal_default_instance() {
    return reinterpret_cast<const GetBookRequest*>(
               &_GetBookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBookRequest& a, GetBookRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBookRequest* New() const final {
    return CreateMaybeMessage<GetBookRequest>(nullptr);
  }

  GetBookRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBookRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBookRequest& from);
  void MergeFrom(const GetBookRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.GetBookRequest";
  }
  protected:
  explicit GetBookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsbnFieldNumber = 1,
  };
  // int64 isbn = 1;
  void clear_isbn();
  ::PROTOBUF_NAMESPACE_ID::int64 isbn() const;
  void set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_isbn() const;
  void _internal_set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.book.GetBookRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 isbn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class GetBookViaAuthor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.GetBookViaAuthor) */ {
 public:
  inline GetBookViaAuthor() : GetBookViaAuthor(nullptr) {}
  virtual ~GetBookViaAuthor();

  GetBookViaAuthor(const GetBookViaAuthor& from);
  GetBookViaAuthor(GetBookViaAuthor&& from) noexcept
    : GetBookViaAuthor() {
    *this = ::std::move(from);
  }

  inline GetBookViaAuthor& operator=(const GetBookViaAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookViaAuthor& operator=(GetBookViaAuthor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBookViaAuthor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBookViaAuthor* internal_default_instance() {
    return reinterpret_cast<const GetBookViaAuthor*>(
               &_GetBookViaAuthor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBookViaAuthor& a, GetBookViaAuthor& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookViaAuthor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookViaAuthor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBookViaAuthor* New() const final {
    return CreateMaybeMessage<GetBookViaAuthor>(nullptr);
  }

  GetBookViaAuthor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBookViaAuthor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBookViaAuthor& from);
  void MergeFrom(const GetBookViaAuthor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookViaAuthor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.GetBookViaAuthor";
  }
  protected:
  explicit GetBookViaAuthor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 1,
  };
  // string author = 1;
  void clear_author();
  const std::string& author() const;
  void set_author(const std::string& value);
  void set_author(std::string&& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  std::string* mutable_author();
  std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // @@protoc_insertion_point(class_scope:com.book.GetBookViaAuthor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class BookStore_BooksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BookStore_BooksEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BookStore_BooksEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BookStore_BooksEntry_DoNotUse();
  explicit BookStore_BooksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BookStore_BooksEntry_DoNotUse& other);
  static const BookStore_BooksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BookStore_BooksEntry_DoNotUse*>(&_BookStore_BooksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.book.BookStore.BooksEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class BookStore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.BookStore) */ {
 public:
  inline BookStore() : BookStore(nullptr) {}
  virtual ~BookStore();

  BookStore(const BookStore& from);
  BookStore(BookStore&& from) noexcept
    : BookStore() {
    *this = ::std::move(from);
  }

  inline BookStore& operator=(const BookStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookStore& operator=(BookStore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BookStore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BookStore* internal_default_instance() {
    return reinterpret_cast<const BookStore*>(
               &_BookStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BookStore& a, BookStore& b) {
    a.Swap(&b);
  }
  inline void Swap(BookStore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BookStore* New() const final {
    return CreateMaybeMessage<BookStore>(nullptr);
  }

  BookStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BookStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BookStore& from);
  void MergeFrom(const BookStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.BookStore";
  }
  protected:
  explicit BookStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBooksFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<int64, string> books = 2;
  int books_size() const;
  private:
  int _internal_books_size() const;
  public:
  void clear_books();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      _internal_books() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      _internal_mutable_books();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      books() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      mutable_books();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.book.BookStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BookStore_BooksEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > books_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class CycleDep1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.CycleDep1) */ {
 public:
  inline CycleDep1() : CycleDep1(nullptr) {}
  virtual ~CycleDep1();

  CycleDep1(const CycleDep1& from);
  CycleDep1(CycleDep1&& from) noexcept
    : CycleDep1() {
    *this = ::std::move(from);
  }

  inline CycleDep1& operator=(const CycleDep1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CycleDep1& operator=(CycleDep1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CycleDep1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleDep1* internal_default_instance() {
    return reinterpret_cast<const CycleDep1*>(
               &_CycleDep1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CycleDep1& a, CycleDep1& b) {
    a.Swap(&b);
  }
  inline void Swap(CycleDep1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CycleDep1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CycleDep1* New() const final {
    return CreateMaybeMessage<CycleDep1>(nullptr);
  }

  CycleDep1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CycleDep1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CycleDep1& from);
  void MergeFrom(const CycleDep1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleDep1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.CycleDep1";
  }
  protected:
  explicit CycleDep1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepFieldNumber = 1,
  };
  // .com.book.CycleDep2 dep = 1;
  bool has_dep() const;
  private:
  bool _internal_has_dep() const;
  public:
  void clear_dep();
  const ::com::book::CycleDep2& dep() const;
  ::com::book::CycleDep2* release_dep();
  ::com::book::CycleDep2* mutable_dep();
  void set_allocated_dep(::com::book::CycleDep2* dep);
  private:
  const ::com::book::CycleDep2& _internal_dep() const;
  ::com::book::CycleDep2* _internal_mutable_dep();
  public:
  void unsafe_arena_set_allocated_dep(
      ::com::book::CycleDep2* dep);
  ::com::book::CycleDep2* unsafe_arena_release_dep();

  // @@protoc_insertion_point(class_scope:com.book.CycleDep1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::book::CycleDep2* dep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// -------------------------------------------------------------------

class CycleDep2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.book.CycleDep2) */ {
 public:
  inline CycleDep2() : CycleDep2(nullptr) {}
  virtual ~CycleDep2();

  CycleDep2(const CycleDep2& from);
  CycleDep2(CycleDep2&& from) noexcept
    : CycleDep2() {
    *this = ::std::move(from);
  }

  inline CycleDep2& operator=(const CycleDep2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CycleDep2& operator=(CycleDep2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CycleDep2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CycleDep2* internal_default_instance() {
    return reinterpret_cast<const CycleDep2*>(
               &_CycleDep2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CycleDep2& a, CycleDep2& b) {
    a.Swap(&b);
  }
  inline void Swap(CycleDep2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CycleDep2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CycleDep2* New() const final {
    return CreateMaybeMessage<CycleDep2>(nullptr);
  }

  CycleDep2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CycleDep2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CycleDep2& from);
  void MergeFrom(const CycleDep2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleDep2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.book.CycleDep2";
  }
  protected:
  explicit CycleDep2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_book_2fsample_2eproto);
    return ::descriptor_table_book_2fsample_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepFieldNumber = 1,
  };
  // .com.book.CycleDep1 dep = 1;
  bool has_dep() const;
  private:
  bool _internal_has_dep() const;
  public:
  void clear_dep();
  const ::com::book::CycleDep1& dep() const;
  ::com::book::CycleDep1* release_dep();
  ::com::book::CycleDep1* mutable_dep();
  void set_allocated_dep(::com::book::CycleDep1* dep);
  private:
  const ::com::book::CycleDep1& _internal_dep() const;
  ::com::book::CycleDep1* _internal_mutable_dep();
  public:
  void unsafe_arena_set_allocated_dep(
      ::com::book::CycleDep1* dep);
  ::com::book::CycleDep1* unsafe_arena_release_dep();

  // @@protoc_insertion_point(class_scope:com.book.CycleDep2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::book::CycleDep1* dep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_book_2fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Author

// string name = 1;
inline void Author::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Author::name() const {
  // @@protoc_insertion_point(field_get:com.book.Author.name)
  return _internal_name();
}
inline void Author::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.book.Author.name)
}
inline std::string* Author::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.book.Author.name)
  return _internal_mutable_name();
}
inline const std::string& Author::_internal_name() const {
  return name_.Get();
}
inline void Author::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Author::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.Author.name)
}
inline void Author::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.Author.name)
}
inline void Author::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.Author.name)
}
inline std::string* Author::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Author::release_name() {
  // @@protoc_insertion_point(field_release:com.book.Author.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.book.Author.name)
}

// -------------------------------------------------------------------

// InsideOneOfMessage

// string field = 1;
inline void InsideOneOfMessage::clear_field() {
  field_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InsideOneOfMessage::field() const {
  // @@protoc_insertion_point(field_get:com.book.InsideOneOfMessage.field)
  return _internal_field();
}
inline void InsideOneOfMessage::set_field(const std::string& value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:com.book.InsideOneOfMessage.field)
}
inline std::string* InsideOneOfMessage::mutable_field() {
  // @@protoc_insertion_point(field_mutable:com.book.InsideOneOfMessage.field)
  return _internal_mutable_field();
}
inline const std::string& InsideOneOfMessage::_internal_field() const {
  return field_.Get();
}
inline void InsideOneOfMessage::_internal_set_field(const std::string& value) {
  
  field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InsideOneOfMessage::set_field(std::string&& value) {
  
  field_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.InsideOneOfMessage.field)
}
inline void InsideOneOfMessage::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.InsideOneOfMessage.field)
}
inline void InsideOneOfMessage::set_field(const char* value,
    size_t size) {
  
  field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.InsideOneOfMessage.field)
}
inline std::string* InsideOneOfMessage::_internal_mutable_field() {
  
  return field_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InsideOneOfMessage::release_field() {
  // @@protoc_insertion_point(field_release:com.book.InsideOneOfMessage.field)
  return field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InsideOneOfMessage::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.book.InsideOneOfMessage.field)
}

// -------------------------------------------------------------------

// Book_Page

// repeated string lines = 1;
inline int Book_Page::_internal_lines_size() const {
  return lines_.size();
}
inline int Book_Page::lines_size() const {
  return _internal_lines_size();
}
inline void Book_Page::clear_lines() {
  lines_.Clear();
}
inline std::string* Book_Page::add_lines() {
  // @@protoc_insertion_point(field_add_mutable:com.book.Book.Page.lines)
  return _internal_add_lines();
}
inline const std::string& Book_Page::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const std::string& Book_Page::lines(int index) const {
  // @@protoc_insertion_point(field_get:com.book.Book.Page.lines)
  return _internal_lines(index);
}
inline std::string* Book_Page::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:com.book.Book.Page.lines)
  return lines_.Mutable(index);
}
inline void Book_Page::set_lines(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.book.Book.Page.lines)
  lines_.Mutable(index)->assign(value);
}
inline void Book_Page::set_lines(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.book.Book.Page.lines)
  lines_.Mutable(index)->assign(std::move(value));
}
inline void Book_Page::set_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.book.Book.Page.lines)
}
inline void Book_Page::set_lines(int index, const char* value, size_t size) {
  lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.book.Book.Page.lines)
}
inline std::string* Book_Page::_internal_add_lines() {
  return lines_.Add();
}
inline void Book_Page::add_lines(const std::string& value) {
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.book.Book.Page.lines)
}
inline void Book_Page::add_lines(std::string&& value) {
  lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.book.Book.Page.lines)
}
inline void Book_Page::add_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.book.Book.Page.lines)
}
inline void Book_Page::add_lines(const char* value, size_t size) {
  lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.book.Book.Page.lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Book_Page::lines() const {
  // @@protoc_insertion_point(field_list:com.book.Book.Page.lines)
  return lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Book_Page::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:com.book.Book.Page.lines)
  return &lines_;
}

// -------------------------------------------------------------------

// Book

// int64 isbn = 1;
inline void Book::clear_isbn() {
  isbn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::_internal_isbn() const {
  return isbn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::isbn() const {
  // @@protoc_insertion_point(field_get:com.book.Book.isbn)
  return _internal_isbn();
}
inline void Book::_internal_set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  isbn_ = value;
}
inline void Book::set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_isbn(value);
  // @@protoc_insertion_point(field_set:com.book.Book.isbn)
}

// string title = 2;
inline void Book::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Book::title() const {
  // @@protoc_insertion_point(field_get:com.book.Book.title)
  return _internal_title();
}
inline void Book::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:com.book.Book.title)
}
inline std::string* Book::mutable_title() {
  // @@protoc_insertion_point(field_mutable:com.book.Book.title)
  return _internal_mutable_title();
}
inline const std::string& Book::_internal_title() const {
  return title_.Get();
}
inline void Book::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Book::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.Book.title)
}
inline void Book::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.Book.title)
}
inline void Book::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.Book.title)
}
inline std::string* Book::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Book::release_title() {
  // @@protoc_insertion_point(field_release:com.book.Book.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Book::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.book.Book.title)
}

// .com.book.Author Author = 3;
inline bool Book::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool Book::has_author() const {
  return _internal_has_author();
}
inline void Book::clear_author() {
  if (GetArena() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
}
inline const ::com::book::Author& Book::_internal_author() const {
  const ::com::book::Author* p = author_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::book::Author*>(
      &::com::book::_Author_default_instance_);
}
inline const ::com::book::Author& Book::author() const {
  // @@protoc_insertion_point(field_get:com.book.Book.Author)
  return _internal_author();
}
inline void Book::unsafe_arena_set_allocated_author(
    ::com::book::Author* author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.book.Book.Author)
}
inline ::com::book::Author* Book::release_author() {
  
  ::com::book::Author* temp = author_;
  author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::book::Author* Book::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:com.book.Book.Author)
  
  ::com::book::Author* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::com::book::Author* Book::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::book::Author>(GetArena());
    author_ = p;
  }
  return author_;
}
inline ::com::book::Author* Book::mutable_author() {
  // @@protoc_insertion_point(field_mutable:com.book.Book.Author)
  return _internal_mutable_author();
}
inline void Book::set_allocated_author(::com::book::Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:com.book.Book.Author)
}

// repeated .com.book.Book.Page pages = 4;
inline int Book::_internal_pages_size() const {
  return pages_.size();
}
inline int Book::pages_size() const {
  return _internal_pages_size();
}
inline void Book::clear_pages() {
  pages_.Clear();
}
inline ::com::book::Book_Page* Book::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:com.book.Book.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::book::Book_Page >*
Book::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:com.book.Book.pages)
  return &pages_;
}
inline const ::com::book::Book_Page& Book::_internal_pages(int index) const {
  return pages_.Get(index);
}
inline const ::com::book::Book_Page& Book::pages(int index) const {
  // @@protoc_insertion_point(field_get:com.book.Book.pages)
  return _internal_pages(index);
}
inline ::com::book::Book_Page* Book::_internal_add_pages() {
  return pages_.Add();
}
inline ::com::book::Book_Page* Book::add_pages() {
  // @@protoc_insertion_point(field_add:com.book.Book.pages)
  return _internal_add_pages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::book::Book_Page >&
Book::pages() const {
  // @@protoc_insertion_point(field_list:com.book.Book.pages)
  return pages_;
}

// string first_oneof_string = 5;
inline bool Book::_internal_has_first_oneof_string() const {
  return first_oneof_case() == kFirstOneofString;
}
inline void Book::set_has_first_oneof_string() {
  _oneof_case_[0] = kFirstOneofString;
}
inline void Book::clear_first_oneof_string() {
  if (_internal_has_first_oneof_string()) {
    first_oneof_.first_oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_first_oneof();
  }
}
inline const std::string& Book::first_oneof_string() const {
  // @@protoc_insertion_point(field_get:com.book.Book.first_oneof_string)
  return _internal_first_oneof_string();
}
inline void Book::set_first_oneof_string(const std::string& value) {
  _internal_set_first_oneof_string(value);
  // @@protoc_insertion_point(field_set:com.book.Book.first_oneof_string)
}
inline std::string* Book::mutable_first_oneof_string() {
  // @@protoc_insertion_point(field_mutable:com.book.Book.first_oneof_string)
  return _internal_mutable_first_oneof_string();
}
inline const std::string& Book::_internal_first_oneof_string() const {
  if (_internal_has_first_oneof_string()) {
    return first_oneof_.first_oneof_string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Book::_internal_set_first_oneof_string(const std::string& value) {
  if (!_internal_has_first_oneof_string()) {
    clear_first_oneof();
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_oneof_.first_oneof_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Book::set_first_oneof_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.book.Book.first_oneof_string)
  if (!_internal_has_first_oneof_string()) {
    clear_first_oneof();
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_oneof_.first_oneof_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.Book.first_oneof_string)
}
inline void Book::set_first_oneof_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_first_oneof_string()) {
    clear_first_oneof();
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_oneof_.first_oneof_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.Book.first_oneof_string)
}
inline void Book::set_first_oneof_string(const char* value,
                             size_t size) {
  if (!_internal_has_first_oneof_string()) {
    clear_first_oneof();
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  first_oneof_.first_oneof_string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.Book.first_oneof_string)
}
inline std::string* Book::_internal_mutable_first_oneof_string() {
  if (!_internal_has_first_oneof_string()) {
    clear_first_oneof();
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return first_oneof_.first_oneof_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Book::release_first_oneof_string() {
  // @@protoc_insertion_point(field_release:com.book.Book.first_oneof_string)
  if (_internal_has_first_oneof_string()) {
    clear_has_first_oneof();
    return first_oneof_.first_oneof_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Book::set_allocated_first_oneof_string(std::string* first_oneof_string) {
  if (has_first_oneof()) {
    clear_first_oneof();
  }
  if (first_oneof_string != nullptr) {
    set_has_first_oneof_string();
    first_oneof_.first_oneof_string_.UnsafeSetDefault(first_oneof_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(first_oneof_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.book.Book.first_oneof_string)
}

// int64 first_oneof_int = 6;
inline bool Book::_internal_has_first_oneof_int() const {
  return first_oneof_case() == kFirstOneofInt;
}
inline void Book::set_has_first_oneof_int() {
  _oneof_case_[0] = kFirstOneofInt;
}
inline void Book::clear_first_oneof_int() {
  if (_internal_has_first_oneof_int()) {
    first_oneof_.first_oneof_int_ = PROTOBUF_LONGLONG(0);
    clear_has_first_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::_internal_first_oneof_int() const {
  if (_internal_has_first_oneof_int()) {
    return first_oneof_.first_oneof_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Book::_internal_set_first_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_first_oneof_int()) {
    clear_first_oneof();
    set_has_first_oneof_int();
  }
  first_oneof_.first_oneof_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::first_oneof_int() const {
  // @@protoc_insertion_point(field_get:com.book.Book.first_oneof_int)
  return _internal_first_oneof_int();
}
inline void Book::set_first_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_first_oneof_int(value);
  // @@protoc_insertion_point(field_set:com.book.Book.first_oneof_int)
}

// .com.book.Book.Availability availability = 7;
inline void Book::clear_availability() {
  availability_ = 0;
}
inline ::com::book::Book_Availability Book::_internal_availability() const {
  return static_cast< ::com::book::Book_Availability >(availability_);
}
inline ::com::book::Book_Availability Book::availability() const {
  // @@protoc_insertion_point(field_get:com.book.Book.availability)
  return _internal_availability();
}
inline void Book::_internal_set_availability(::com::book::Book_Availability value) {
  
  availability_ = value;
}
inline void Book::set_availability(::com::book::Book_Availability value) {
  _internal_set_availability(value);
  // @@protoc_insertion_point(field_set:com.book.Book.availability)
}

// .com.book.CanRecommend recommended = 8;
inline void Book::clear_recommended() {
  recommended_ = 0;
}
inline ::com::book::CanRecommend Book::_internal_recommended() const {
  return static_cast< ::com::book::CanRecommend >(recommended_);
}
inline ::com::book::CanRecommend Book::recommended() const {
  // @@protoc_insertion_point(field_get:com.book.Book.recommended)
  return _internal_recommended();
}
inline void Book::_internal_set_recommended(::com::book::CanRecommend value) {
  
  recommended_ = value;
}
inline void Book::set_recommended(::com::book::CanRecommend value) {
  _internal_set_recommended(value);
  // @@protoc_insertion_point(field_set:com.book.Book.recommended)
}

// string second_oneof_string = 9;
inline bool Book::_internal_has_second_oneof_string() const {
  return second_oneof_case() == kSecondOneofString;
}
inline void Book::set_has_second_oneof_string() {
  _oneof_case_[1] = kSecondOneofString;
}
inline void Book::clear_second_oneof_string() {
  if (_internal_has_second_oneof_string()) {
    second_oneof_.second_oneof_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_second_oneof();
  }
}
inline const std::string& Book::second_oneof_string() const {
  // @@protoc_insertion_point(field_get:com.book.Book.second_oneof_string)
  return _internal_second_oneof_string();
}
inline void Book::set_second_oneof_string(const std::string& value) {
  _internal_set_second_oneof_string(value);
  // @@protoc_insertion_point(field_set:com.book.Book.second_oneof_string)
}
inline std::string* Book::mutable_second_oneof_string() {
  // @@protoc_insertion_point(field_mutable:com.book.Book.second_oneof_string)
  return _internal_mutable_second_oneof_string();
}
inline const std::string& Book::_internal_second_oneof_string() const {
  if (_internal_has_second_oneof_string()) {
    return second_oneof_.second_oneof_string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Book::_internal_set_second_oneof_string(const std::string& value) {
  if (!_internal_has_second_oneof_string()) {
    clear_second_oneof();
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  second_oneof_.second_oneof_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Book::set_second_oneof_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.book.Book.second_oneof_string)
  if (!_internal_has_second_oneof_string()) {
    clear_second_oneof();
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  second_oneof_.second_oneof_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.Book.second_oneof_string)
}
inline void Book::set_second_oneof_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_second_oneof_string()) {
    clear_second_oneof();
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  second_oneof_.second_oneof_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.Book.second_oneof_string)
}
inline void Book::set_second_oneof_string(const char* value,
                             size_t size) {
  if (!_internal_has_second_oneof_string()) {
    clear_second_oneof();
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  second_oneof_.second_oneof_string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.Book.second_oneof_string)
}
inline std::string* Book::_internal_mutable_second_oneof_string() {
  if (!_internal_has_second_oneof_string()) {
    clear_second_oneof();
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return second_oneof_.second_oneof_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Book::release_second_oneof_string() {
  // @@protoc_insertion_point(field_release:com.book.Book.second_oneof_string)
  if (_internal_has_second_oneof_string()) {
    clear_has_second_oneof();
    return second_oneof_.second_oneof_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Book::set_allocated_second_oneof_string(std::string* second_oneof_string) {
  if (has_second_oneof()) {
    clear_second_oneof();
  }
  if (second_oneof_string != nullptr) {
    set_has_second_oneof_string();
    second_oneof_.second_oneof_string_.UnsafeSetDefault(second_oneof_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(second_oneof_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.book.Book.second_oneof_string)
}

// int64 second_oneof_int = 10;
inline bool Book::_internal_has_second_oneof_int() const {
  return second_oneof_case() == kSecondOneofInt;
}
inline void Book::set_has_second_oneof_int() {
  _oneof_case_[1] = kSecondOneofInt;
}
inline void Book::clear_second_oneof_int() {
  if (_internal_has_second_oneof_int()) {
    second_oneof_.second_oneof_int_ = PROTOBUF_LONGLONG(0);
    clear_has_second_oneof();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::_internal_second_oneof_int() const {
  if (_internal_has_second_oneof_int()) {
    return second_oneof_.second_oneof_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Book::_internal_set_second_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_second_oneof_int()) {
    clear_second_oneof();
    set_has_second_oneof_int();
  }
  second_oneof_.second_oneof_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Book::second_oneof_int() const {
  // @@protoc_insertion_point(field_get:com.book.Book.second_oneof_int)
  return _internal_second_oneof_int();
}
inline void Book::set_second_oneof_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_second_oneof_int(value);
  // @@protoc_insertion_point(field_set:com.book.Book.second_oneof_int)
}

// .com.book.InsideOneOfMessage second_oneof_message = 11;
inline bool Book::_internal_has_second_oneof_message() const {
  return second_oneof_case() == kSecondOneofMessage;
}
inline bool Book::has_second_oneof_message() const {
  return _internal_has_second_oneof_message();
}
inline void Book::set_has_second_oneof_message() {
  _oneof_case_[1] = kSecondOneofMessage;
}
inline void Book::clear_second_oneof_message() {
  if (_internal_has_second_oneof_message()) {
    if (GetArena() == nullptr) {
      delete second_oneof_.second_oneof_message_;
    }
    clear_has_second_oneof();
  }
}
inline ::com::book::InsideOneOfMessage* Book::release_second_oneof_message() {
  // @@protoc_insertion_point(field_release:com.book.Book.second_oneof_message)
  if (_internal_has_second_oneof_message()) {
    clear_has_second_oneof();
      ::com::book::InsideOneOfMessage* temp = second_oneof_.second_oneof_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    second_oneof_.second_oneof_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::book::InsideOneOfMessage& Book::_internal_second_oneof_message() const {
  return _internal_has_second_oneof_message()
      ? *second_oneof_.second_oneof_message_
      : *reinterpret_cast< ::com::book::InsideOneOfMessage*>(&::com::book::_InsideOneOfMessage_default_instance_);
}
inline const ::com::book::InsideOneOfMessage& Book::second_oneof_message() const {
  // @@protoc_insertion_point(field_get:com.book.Book.second_oneof_message)
  return _internal_second_oneof_message();
}
inline ::com::book::InsideOneOfMessage* Book::unsafe_arena_release_second_oneof_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.book.Book.second_oneof_message)
  if (_internal_has_second_oneof_message()) {
    clear_has_second_oneof();
    ::com::book::InsideOneOfMessage* temp = second_oneof_.second_oneof_message_;
    second_oneof_.second_oneof_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Book::unsafe_arena_set_allocated_second_oneof_message(::com::book::InsideOneOfMessage* second_oneof_message) {
  clear_second_oneof();
  if (second_oneof_message) {
    set_has_second_oneof_message();
    second_oneof_.second_oneof_message_ = second_oneof_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.book.Book.second_oneof_message)
}
inline ::com::book::InsideOneOfMessage* Book::_internal_mutable_second_oneof_message() {
  if (!_internal_has_second_oneof_message()) {
    clear_second_oneof();
    set_has_second_oneof_message();
    second_oneof_.second_oneof_message_ = CreateMaybeMessage< ::com::book::InsideOneOfMessage >(GetArena());
  }
  return second_oneof_.second_oneof_message_;
}
inline ::com::book::InsideOneOfMessage* Book::mutable_second_oneof_message() {
  // @@protoc_insertion_point(field_mutable:com.book.Book.second_oneof_message)
  return _internal_mutable_second_oneof_message();
}

inline bool Book::has_first_oneof() const {
  return first_oneof_case() != FIRST_ONEOF_NOT_SET;
}
inline void Book::clear_has_first_oneof() {
  _oneof_case_[0] = FIRST_ONEOF_NOT_SET;
}
inline bool Book::has_second_oneof() const {
  return second_oneof_case() != SECOND_ONEOF_NOT_SET;
}
inline void Book::clear_has_second_oneof() {
  _oneof_case_[1] = SECOND_ONEOF_NOT_SET;
}
inline Book::FirstOneofCase Book::first_oneof_case() const {
  return Book::FirstOneofCase(_oneof_case_[0]);
}
inline Book::SecondOneofCase Book::second_oneof_case() const {
  return Book::SecondOneofCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// GetBookRequest

// int64 isbn = 1;
inline void GetBookRequest::clear_isbn() {
  isbn_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBookRequest::_internal_isbn() const {
  return isbn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBookRequest::isbn() const {
  // @@protoc_insertion_point(field_get:com.book.GetBookRequest.isbn)
  return _internal_isbn();
}
inline void GetBookRequest::_internal_set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  isbn_ = value;
}
inline void GetBookRequest::set_isbn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_isbn(value);
  // @@protoc_insertion_point(field_set:com.book.GetBookRequest.isbn)
}

// -------------------------------------------------------------------

// GetBookViaAuthor

// string author = 1;
inline void GetBookViaAuthor::clear_author() {
  author_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBookViaAuthor::author() const {
  // @@protoc_insertion_point(field_get:com.book.GetBookViaAuthor.author)
  return _internal_author();
}
inline void GetBookViaAuthor::set_author(const std::string& value) {
  _internal_set_author(value);
  // @@protoc_insertion_point(field_set:com.book.GetBookViaAuthor.author)
}
inline std::string* GetBookViaAuthor::mutable_author() {
  // @@protoc_insertion_point(field_mutable:com.book.GetBookViaAuthor.author)
  return _internal_mutable_author();
}
inline const std::string& GetBookViaAuthor::_internal_author() const {
  return author_.Get();
}
inline void GetBookViaAuthor::_internal_set_author(const std::string& value) {
  
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBookViaAuthor::set_author(std::string&& value) {
  
  author_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.GetBookViaAuthor.author)
}
inline void GetBookViaAuthor::set_author(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.GetBookViaAuthor.author)
}
inline void GetBookViaAuthor::set_author(const char* value,
    size_t size) {
  
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.GetBookViaAuthor.author)
}
inline std::string* GetBookViaAuthor::_internal_mutable_author() {
  
  return author_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBookViaAuthor::release_author() {
  // @@protoc_insertion_point(field_release:com.book.GetBookViaAuthor.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBookViaAuthor::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.book.GetBookViaAuthor.author)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BookStore

// string name = 1;
inline void BookStore::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BookStore::name() const {
  // @@protoc_insertion_point(field_get:com.book.BookStore.name)
  return _internal_name();
}
inline void BookStore::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.book.BookStore.name)
}
inline std::string* BookStore::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.book.BookStore.name)
  return _internal_mutable_name();
}
inline const std::string& BookStore::_internal_name() const {
  return name_.Get();
}
inline void BookStore::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BookStore::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.book.BookStore.name)
}
inline void BookStore::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.book.BookStore.name)
}
inline void BookStore::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.book.BookStore.name)
}
inline std::string* BookStore::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BookStore::release_name() {
  // @@protoc_insertion_point(field_release:com.book.BookStore.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BookStore::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.book.BookStore.name)
}

// map<int64, string> books = 2;
inline int BookStore::_internal_books_size() const {
  return books_.size();
}
inline int BookStore::books_size() const {
  return _internal_books_size();
}
inline void BookStore::clear_books() {
  books_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
BookStore::_internal_books() const {
  return books_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
BookStore::books() const {
  // @@protoc_insertion_point(field_map:com.book.BookStore.books)
  return _internal_books();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
BookStore::_internal_mutable_books() {
  return books_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
BookStore::mutable_books() {
  // @@protoc_insertion_point(field_mutable_map:com.book.BookStore.books)
  return _internal_mutable_books();
}

// -------------------------------------------------------------------

// CycleDep1

// .com.book.CycleDep2 dep = 1;
inline bool CycleDep1::_internal_has_dep() const {
  return this != internal_default_instance() && dep_ != nullptr;
}
inline bool CycleDep1::has_dep() const {
  return _internal_has_dep();
}
inline void CycleDep1::clear_dep() {
  if (GetArena() == nullptr && dep_ != nullptr) {
    delete dep_;
  }
  dep_ = nullptr;
}
inline const ::com::book::CycleDep2& CycleDep1::_internal_dep() const {
  const ::com::book::CycleDep2* p = dep_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::book::CycleDep2*>(
      &::com::book::_CycleDep2_default_instance_);
}
inline const ::com::book::CycleDep2& CycleDep1::dep() const {
  // @@protoc_insertion_point(field_get:com.book.CycleDep1.dep)
  return _internal_dep();
}
inline void CycleDep1::unsafe_arena_set_allocated_dep(
    ::com::book::CycleDep2* dep) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dep_);
  }
  dep_ = dep;
  if (dep) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.book.CycleDep1.dep)
}
inline ::com::book::CycleDep2* CycleDep1::release_dep() {
  
  ::com::book::CycleDep2* temp = dep_;
  dep_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::book::CycleDep2* CycleDep1::unsafe_arena_release_dep() {
  // @@protoc_insertion_point(field_release:com.book.CycleDep1.dep)
  
  ::com::book::CycleDep2* temp = dep_;
  dep_ = nullptr;
  return temp;
}
inline ::com::book::CycleDep2* CycleDep1::_internal_mutable_dep() {
  
  if (dep_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::book::CycleDep2>(GetArena());
    dep_ = p;
  }
  return dep_;
}
inline ::com::book::CycleDep2* CycleDep1::mutable_dep() {
  // @@protoc_insertion_point(field_mutable:com.book.CycleDep1.dep)
  return _internal_mutable_dep();
}
inline void CycleDep1::set_allocated_dep(::com::book::CycleDep2* dep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dep_;
  }
  if (dep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dep);
    if (message_arena != submessage_arena) {
      dep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dep, submessage_arena);
    }
    
  } else {
    
  }
  dep_ = dep;
  // @@protoc_insertion_point(field_set_allocated:com.book.CycleDep1.dep)
}

// -------------------------------------------------------------------

// CycleDep2

// .com.book.CycleDep1 dep = 1;
inline bool CycleDep2::_internal_has_dep() const {
  return this != internal_default_instance() && dep_ != nullptr;
}
inline bool CycleDep2::has_dep() const {
  return _internal_has_dep();
}
inline void CycleDep2::clear_dep() {
  if (GetArena() == nullptr && dep_ != nullptr) {
    delete dep_;
  }
  dep_ = nullptr;
}
inline const ::com::book::CycleDep1& CycleDep2::_internal_dep() const {
  const ::com::book::CycleDep1* p = dep_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::book::CycleDep1*>(
      &::com::book::_CycleDep1_default_instance_);
}
inline const ::com::book::CycleDep1& CycleDep2::dep() const {
  // @@protoc_insertion_point(field_get:com.book.CycleDep2.dep)
  return _internal_dep();
}
inline void CycleDep2::unsafe_arena_set_allocated_dep(
    ::com::book::CycleDep1* dep) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dep_);
  }
  dep_ = dep;
  if (dep) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.book.CycleDep2.dep)
}
inline ::com::book::CycleDep1* CycleDep2::release_dep() {
  
  ::com::book::CycleDep1* temp = dep_;
  dep_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::book::CycleDep1* CycleDep2::unsafe_arena_release_dep() {
  // @@protoc_insertion_point(field_release:com.book.CycleDep2.dep)
  
  ::com::book::CycleDep1* temp = dep_;
  dep_ = nullptr;
  return temp;
}
inline ::com::book::CycleDep1* CycleDep2::_internal_mutable_dep() {
  
  if (dep_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::book::CycleDep1>(GetArena());
    dep_ = p;
  }
  return dep_;
}
inline ::com::book::CycleDep1* CycleDep2::mutable_dep() {
  // @@protoc_insertion_point(field_mutable:com.book.CycleDep2.dep)
  return _internal_mutable_dep();
}
inline void CycleDep2::set_allocated_dep(::com::book::CycleDep1* dep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dep_;
  }
  if (dep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dep);
    if (message_arena != submessage_arena) {
      dep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dep, submessage_arena);
    }
    
  } else {
    
  }
  dep_ = dep;
  // @@protoc_insertion_point(field_set_allocated:com.book.CycleDep2.dep)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace book
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::book::Book_Availability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::book::Book_Availability>() {
  return ::com::book::Book_Availability_descriptor();
}
template <> struct is_proto_enum< ::com::book::CanRecommend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::book::CanRecommend>() {
  return ::com::book::CanRecommend_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_book_2fsample_2eproto
