// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: book/sample.proto

#include "book/sample.pb.h"
#include "book/sample.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace book {

static const char* BookService_method_names[] = {
  "/com.book.BookService/GetBook",
  "/com.book.BookService/GetBooksViaAuthor",
  "/com.book.BookService/GetGreatestBook",
  "/com.book.BookService/GetBooks",
};

std::unique_ptr< BookService::Stub> BookService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BookService::Stub> stub(new BookService::Stub(channel));
  return stub;
}

BookService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetBook_(BookService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBooksViaAuthor_(BookService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGreatestBook_(BookService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetBooks_(BookService_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BookService::Stub::GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::com::book::Book* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBook_, context, request, response);
}

void BookService::Stub::experimental_async::GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, std::move(f));
}

void BookService::Stub::experimental_async::GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::book::Book>* BookService::Stub::PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::book::Book>::Create(channel_.get(), cq, rpcmethod_GetBook_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::com::book::Book>* BookService::Stub::AsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::com::book::Book>* BookService::Stub::GetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request) {
  return ::grpc::internal::ClientReaderFactory< ::com::book::Book>::Create(channel_.get(), rpcmethod_GetBooksViaAuthor_, context, request);
}

void BookService::Stub::experimental_async::GetBooksViaAuthor(::grpc::ClientContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::experimental::ClientReadReactor< ::com::book::Book>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::com::book::Book>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBooksViaAuthor_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::com::book::Book>* BookService::Stub::AsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::com::book::Book>::Create(channel_.get(), cq, rpcmethod_GetBooksViaAuthor_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::com::book::Book>* BookService::Stub::PrepareAsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::com::book::Book>::Create(channel_.get(), cq, rpcmethod_GetBooksViaAuthor_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::com::book::GetBookRequest>* BookService::Stub::GetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response) {
  return ::grpc::internal::ClientWriterFactory< ::com::book::GetBookRequest>::Create(channel_.get(), rpcmethod_GetGreatestBook_, context, response);
}

void BookService::Stub::experimental_async::GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::experimental::ClientWriteReactor< ::com::book::GetBookRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::com::book::GetBookRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_GetGreatestBook_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>* BookService::Stub::AsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::com::book::GetBookRequest>::Create(channel_.get(), cq, rpcmethod_GetGreatestBook_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>* BookService::Stub::PrepareAsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::com::book::GetBookRequest>::Create(channel_.get(), cq, rpcmethod_GetGreatestBook_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* BookService::Stub::GetBooksRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::com::book::GetBookRequest, ::com::book::Book>::Create(channel_.get(), rpcmethod_GetBooks_, context);
}

void BookService::Stub::experimental_async::GetBooks(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::book::GetBookRequest,::com::book::Book>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::com::book::GetBookRequest,::com::book::Book>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBooks_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* BookService::Stub::AsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::book::GetBookRequest, ::com::book::Book>::Create(channel_.get(), cq, rpcmethod_GetBooks_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* BookService::Stub::PrepareAsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::com::book::GetBookRequest, ::com::book::Book>::Create(channel_.get(), cq, rpcmethod_GetBooks_, context, false, nullptr);
}

BookService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BookService::Service, ::com::book::GetBookRequest, ::com::book::Book>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::book::GetBookRequest* req,
             ::com::book::Book* resp) {
               return service->GetBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BookService::Service, ::com::book::GetBookViaAuthor, ::com::book::Book>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::book::GetBookViaAuthor* req,
             ::grpc::ServerWriter<::com::book::Book>* writer) {
               return service->GetBooksViaAuthor(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< BookService::Service, ::com::book::GetBookRequest, ::com::book::Book>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::com::book::GetBookRequest>* reader,
             ::com::book::Book* resp) {
               return service->GetGreatestBook(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BookService::Service, ::com::book::GetBookRequest, ::com::book::Book>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::com::book::Book,
             ::com::book::GetBookRequest>* stream) {
               return service->GetBooks(ctx, stream);
             }, this)));
}

BookService::Service::~Service() {
}

::grpc::Status BookService::Service::GetBook(::grpc::ServerContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BookService::Service::GetBooksViaAuthor(::grpc::ServerContext* context, const ::com::book::GetBookViaAuthor* request, ::grpc::ServerWriter< ::com::book::Book>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BookService::Service::GetGreatestBook(::grpc::ServerContext* context, ::grpc::ServerReader< ::com::book::GetBookRequest>* reader, ::com::book::Book* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BookService::Service::GetBooks(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace book

