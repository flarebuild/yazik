// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: book/sample.proto
#ifndef GRPC_book_2fsample_2eproto__INCLUDED
#define GRPC_book_2fsample_2eproto__INCLUDED

#include "book/sample.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace com {
namespace book {

class BookService final {
 public:
  static constexpr char const* service_full_name() {
    return "com.book.BookService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::com::book::Book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>> AsyncGetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>>(AsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>> PrepareAsyncGetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>>(PrepareAsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::com::book::Book>> GetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::com::book::Book>>(GetBooksViaAuthorRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::com::book::Book>> AsyncGetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::com::book::Book>>(AsyncGetBooksViaAuthorRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::com::book::Book>> PrepareAsyncGetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::com::book::Book>>(PrepareAsyncGetBooksViaAuthorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::com::book::GetBookRequest>> GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::com::book::GetBookRequest>>(GetGreatestBookRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>> AsyncGetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>>(AsyncGetGreatestBookRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>> PrepareAsyncGetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>>(PrepareAsyncGetGreatestBookRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>> GetBooks(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>>(GetBooksRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>> AsyncGetBooks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>>(AsyncGetBooksRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>> PrepareAsyncGetBooks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>>(PrepareAsyncGetBooksRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBooksViaAuthor(::grpc::ClientContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::ClientReadReactor< ::com::book::Book>* reactor) = 0;
      #else
      virtual void GetBooksViaAuthor(::grpc::ClientContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::experimental::ClientReadReactor< ::com::book::Book>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::ClientWriteReactor< ::com::book::GetBookRequest>* reactor) = 0;
      #else
      virtual void GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::experimental::ClientWriteReactor< ::com::book::GetBookRequest>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBooks(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::com::book::GetBookRequest,::com::book::Book>* reactor) = 0;
      #else
      virtual void GetBooks(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::book::GetBookRequest,::com::book::Book>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::com::book::Book>* PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::com::book::Book>* GetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::com::book::Book>* AsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::com::book::Book>* PrepareAsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::com::book::GetBookRequest>* GetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>* AsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::com::book::GetBookRequest>* PrepareAsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>* GetBooksRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>* AsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::com::book::GetBookRequest, ::com::book::Book>* PrepareAsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::com::book::Book* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::book::Book>> AsyncGetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::book::Book>>(AsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::book::Book>> PrepareAsyncGetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::com::book::Book>>(PrepareAsyncGetBookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::com::book::Book>> GetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::com::book::Book>>(GetBooksViaAuthorRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::com::book::Book>> AsyncGetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::com::book::Book>>(AsyncGetBooksViaAuthorRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::com::book::Book>> PrepareAsyncGetBooksViaAuthor(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::com::book::Book>>(PrepareAsyncGetBooksViaAuthorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::com::book::GetBookRequest>> GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::com::book::GetBookRequest>>(GetGreatestBookRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>> AsyncGetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>>(AsyncGetGreatestBookRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>> PrepareAsyncGetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>>(PrepareAsyncGetGreatestBookRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>> GetBooks(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>>(GetBooksRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>> AsyncGetBooks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>>(AsyncGetBooksRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>> PrepareAsyncGetBooks(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>>(PrepareAsyncGetBooksRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBook(::grpc::ClientContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBooksViaAuthor(::grpc::ClientContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::ClientReadReactor< ::com::book::Book>* reactor) override;
      #else
      void GetBooksViaAuthor(::grpc::ClientContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::experimental::ClientReadReactor< ::com::book::Book>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::ClientWriteReactor< ::com::book::GetBookRequest>* reactor) override;
      #else
      void GetGreatestBook(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::experimental::ClientWriteReactor< ::com::book::GetBookRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBooks(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::com::book::GetBookRequest,::com::book::Book>* reactor) override;
      #else
      void GetBooks(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::com::book::GetBookRequest,::com::book::Book>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::com::book::Book>* AsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::com::book::Book>* PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::com::book::GetBookRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::com::book::Book>* GetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request) override;
    ::grpc::ClientAsyncReader< ::com::book::Book>* AsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::com::book::Book>* PrepareAsyncGetBooksViaAuthorRaw(::grpc::ClientContext* context, const ::com::book::GetBookViaAuthor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::com::book::GetBookRequest>* GetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response) override;
    ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>* AsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::com::book::GetBookRequest>* PrepareAsyncGetGreatestBookRaw(::grpc::ClientContext* context, ::com::book::Book* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* GetBooksRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* AsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::com::book::GetBookRequest, ::com::book::Book>* PrepareAsyncGetBooksRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBook_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBooksViaAuthor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGreatestBook_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBooks_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetBook(::grpc::ServerContext* context, const ::com::book::GetBookRequest* request, ::com::book::Book* response);
    virtual ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* context, const ::com::book::GetBookViaAuthor* request, ::grpc::ServerWriter< ::com::book::Book>* writer);
    virtual ::grpc::Status GetGreatestBook(::grpc::ServerContext* context, ::grpc::ServerReader< ::com::book::GetBookRequest>* reader, ::com::book::Book* response);
    virtual ::grpc::Status GetBooks(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBook() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBook(::grpc::ServerContext* context, ::com::book::GetBookRequest* request, ::grpc::ServerAsyncResponseWriter< ::com::book::Book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBooksViaAuthor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooksViaAuthor(::grpc::ServerContext* context, ::com::book::GetBookViaAuthor* request, ::grpc::ServerAsyncWriter< ::com::book::Book>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGreatestBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGreatestBook() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGreatestBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGreatestBook(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::book::GetBookRequest>* /*reader*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGreatestBook(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::com::book::Book, ::com::book::GetBookRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBooks() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBooks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooks(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBook<WithAsyncMethod_GetBooksViaAuthor<WithAsyncMethod_GetGreatestBook<WithAsyncMethod_GetBooks<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::com::book::GetBookRequest, ::com::book::Book>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::com::book::GetBookRequest* request, ::com::book::Book* response) { return this->GetBook(context, request, response); }));}
    void SetMessageAllocatorFor_GetBook(
        ::grpc::experimental::MessageAllocator< ::com::book::GetBookRequest, ::com::book::Book>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::com::book::GetBookRequest, ::com::book::Book>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBook(
      ::grpc::CallbackServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBooksViaAuthor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::com::book::GetBookViaAuthor, ::com::book::Book>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::com::book::GetBookViaAuthor* request) { return this->GetBooksViaAuthor(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::com::book::Book>* GetBooksViaAuthor(
      ::grpc::CallbackServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::com::book::Book>* GetBooksViaAuthor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGreatestBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGreatestBook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::com::book::GetBookRequest, ::com::book::Book>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::com::book::Book* response) { return this->GetGreatestBook(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_GetGreatestBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGreatestBook(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::book::GetBookRequest>* /*reader*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::com::book::GetBookRequest>* GetGreatestBook(
      ::grpc::CallbackServerContext* /*context*/, ::com::book::Book* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::com::book::GetBookRequest>* GetGreatestBook(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::com::book::Book* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBooks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::com::book::GetBookRequest, ::com::book::Book>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetBooks(context); }));
    }
    ~ExperimentalWithCallbackMethod_GetBooks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::com::book::GetBookRequest, ::com::book::Book>* GetBooks(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::com::book::GetBookRequest, ::com::book::Book>* GetBooks(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetBook<ExperimentalWithCallbackMethod_GetBooksViaAuthor<ExperimentalWithCallbackMethod_GetGreatestBook<ExperimentalWithCallbackMethod_GetBooks<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetBook<ExperimentalWithCallbackMethod_GetBooksViaAuthor<ExperimentalWithCallbackMethod_GetGreatestBook<ExperimentalWithCallbackMethod_GetBooks<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBook() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBooksViaAuthor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGreatestBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGreatestBook() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGreatestBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGreatestBook(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::book::GetBookRequest>* /*reader*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBooks() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBooks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBook() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBook(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBooksViaAuthor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooksViaAuthor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGreatestBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGreatestBook() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGreatestBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGreatestBook(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::book::GetBookRequest>* /*reader*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGreatestBook(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBooks() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBooks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBooks(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBook(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBook(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBook(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBooksViaAuthor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetBooksViaAuthor(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBooksViaAuthor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetBooksViaAuthor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGreatestBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGreatestBook() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->GetGreatestBook(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGreatestBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGreatestBook(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::com::book::GetBookRequest>* /*reader*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* GetGreatestBook(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* GetGreatestBook(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBooks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBooks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->GetBooks(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBooks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBooks(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::com::book::Book, ::com::book::GetBookRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetBooks(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetBooks(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBook : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBook() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::com::book::GetBookRequest, ::com::book::Book>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::com::book::GetBookRequest, ::com::book::Book>* streamer) {
                       return this->StreamedGetBook(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBook() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBook(::grpc::ServerContext* /*context*/, const ::com::book::GetBookRequest* /*request*/, ::com::book::Book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBook(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::com::book::GetBookRequest,::com::book::Book>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBook<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBooksViaAuthor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBooksViaAuthor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::com::book::GetBookViaAuthor, ::com::book::Book>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::com::book::GetBookViaAuthor, ::com::book::Book>* streamer) {
                       return this->StreamedGetBooksViaAuthor(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBooksViaAuthor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBooksViaAuthor(::grpc::ServerContext* /*context*/, const ::com::book::GetBookViaAuthor* /*request*/, ::grpc::ServerWriter< ::com::book::Book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBooksViaAuthor(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::com::book::GetBookViaAuthor,::com::book::Book>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetBooksViaAuthor<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBook<WithSplitStreamingMethod_GetBooksViaAuthor<Service > > StreamedService;
};

}  // namespace book
}  // namespace com


#endif  // GRPC_book_2fsample_2eproto__INCLUDED
